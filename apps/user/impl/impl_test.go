package impl_test

import (
	"context"
	"os"
	"testing"

	"github.com/acd19ml/TalentRank/apps/git"
	"github.com/acd19ml/TalentRank/apps/llm"
	"github.com/acd19ml/TalentRank/apps/user"
	"github.com/acd19ml/TalentRank/apps/user/impl"
	"github.com/stretchr/testify/require"
	"google.golang.org/grpc"
)

func TestInferUserLocationWithLLM_Integration(t *testing.T) {
	if os.Getenv("ARK_API_KEY") == "" {
		t.Fatal("ARK_API_KEY is not set")
	}
	conn, err := grpc.Dial("localhost:50052", grpc.WithInsecure())
	require.NoError(t, err)
	defer conn.Close()

	client := llm.NewLLMServiceClient(conn)
	s := &impl.ServiceImpl{}
	s.SetLLMClient(client) // 使用 setter 方法注入 llm 客户端

	userIns := &user.User{Username: "Away0x"}
	err = s.InferUserLocationWithLLM(context.Background(), userIns)

	require.NoError(t, err)
	require.NotEmpty(t, userIns.PossibleNation)
	require.NotEmpty(t, userIns.ConfidenceLevel)
}

func TestConstructUser_Integration(t *testing.T) {
	if os.Getenv("GITHUB_TOKEN") == "" {
		t.Fatal("GITHUB_TOKEN is not set")
	}
	// 设置 gRPC 连接，确保在本地启动 gRPC 服务（例如 localhost:50051）
	conn, err := grpc.Dial("localhost:50051", grpc.WithInsecure())
	require.NoError(t, err)
	defer conn.Close()

	// 初始化 GitServiceClient
	client := git.NewGitServiceClient(conn)
	service := &impl.ServiceImpl{}
	service.SetGitClient(client)

	// 准备上下文和输入参数
	ctx := context.Background()
	username := "Away0x"

	// 调用待测试的函数
	userObj, err := service.ConstructUser(ctx, username)

	// 确认没有错误发生
	require.NoError(t, err)
	require.NotNil(t, userObj)

	// 验证各个字段是否正确填充
	require.Equal(t, username, userObj.Username)

	// 检查默认 ID 是否被填充
	require.NotEmpty(t, userObj.Id, "User ID should be generated by InjectDefault")

	// 清理：测试结束后断开连接
	t.Log("Integration test for constructUser completed successfully.")
}

func TestGetOrganizations_Integration(t *testing.T) {
	token := os.Getenv("GITHUB_TOKEN")
	if token == "" {
		t.Fatal("GITHUB_TOKEN is not set")
	}

	// 设置 gRPC 连接，连接到本地 gRPC 服务
	conn, err := grpc.Dial("localhost:50051", grpc.WithInsecure())
	require.NoError(t, err)
	defer conn.Close()

	// 创建 GitServiceClient 实例
	client := git.NewGitServiceClient(conn)
	service := &impl.ServiceImpl{}
	service.SetGitClient(client)

	// 准备请求参数
	ctx := context.Background()
	req := &git.GetUsernameRequest{Username: "donghwan-shin"} // 使用有效的 GitHub 用户名

	// 调用待测试的 GetOrganizations 方法
	resp, err := client.GetOrganizations(ctx, req)
	require.NoError(t, err)
	require.NotNil(t, resp)

	// 验证响应中的组织列表
	require.NotEmpty(t, resp.Organizations, "Organizations list should not be empty")
	for _, org := range resp.Organizations {
		t.Logf("Organization: %s", org)
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.12.4
// source: apps/git/pb/git.proto

package git

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 通用的用户名请求消息
type GetUsernameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GetUsernameRequest) Reset() {
	*x = GetUsernameRequest{}
	mi := &file_apps_git_pb_git_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsernameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsernameRequest) ProtoMessage() {}

func (x *GetUsernameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_git_pb_git_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsernameRequest.ProtoReflect.Descriptor instead.
func (*GetUsernameRequest) Descriptor() ([]byte, []int) {
	return file_apps_git_pb_git_proto_rawDescGZIP(), []int{0}
}

func (x *GetUsernameRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// LineChangeStats包含每个仓库的增删行数信息
type RepoLineChangesCommitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalChanges int32 `protobuf:"varint,1,opt,name=total_changes,json=totalChanges,proto3" json:"total_changes,omitempty"`
	UserChanges  int32 `protobuf:"varint,2,opt,name=user_changes,json=userChanges,proto3" json:"user_changes,omitempty"`
	TotalCommits int32 `protobuf:"varint,3,opt,name=total_commits,json=totalCommits,proto3" json:"total_commits,omitempty"`
	UserCommits  int32 `protobuf:"varint,4,opt,name=user_commits,json=userCommits,proto3" json:"user_commits,omitempty"`
}

func (x *RepoLineChangesCommitsResponse) Reset() {
	*x = RepoLineChangesCommitsResponse{}
	mi := &file_apps_git_pb_git_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepoLineChangesCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoLineChangesCommitsResponse) ProtoMessage() {}

func (x *RepoLineChangesCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apps_git_pb_git_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoLineChangesCommitsResponse.ProtoReflect.Descriptor instead.
func (*RepoLineChangesCommitsResponse) Descriptor() ([]byte, []int) {
	return file_apps_git_pb_git_proto_rawDescGZIP(), []int{1}
}

func (x *RepoLineChangesCommitsResponse) GetTotalChanges() int32 {
	if x != nil {
		return x.TotalChanges
	}
	return 0
}

func (x *RepoLineChangesCommitsResponse) GetUserChanges() int32 {
	if x != nil {
		return x.UserChanges
	}
	return 0
}

func (x *RepoLineChangesCommitsResponse) GetTotalCommits() int32 {
	if x != nil {
		return x.TotalCommits
	}
	return 0
}

func (x *RepoLineChangesCommitsResponse) GetUserCommits() int32 {
	if x != nil {
		return x.UserCommits
	}
	return 0
}

// 返回字符串的通用响应消息
type StringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *StringResponse) Reset() {
	*x = StringResponse{}
	mi := &file_apps_git_pb_git_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringResponse) ProtoMessage() {}

func (x *StringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apps_git_pb_git_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringResponse.ProtoReflect.Descriptor instead.
func (*StringResponse) Descriptor() ([]byte, []int) {
	return file_apps_git_pb_git_proto_rawDescGZIP(), []int{2}
}

func (x *StringResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// 返回整数的通用响应消息
type IntResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *IntResponse) Reset() {
	*x = IntResponse{}
	mi := &file_apps_git_pb_git_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntResponse) ProtoMessage() {}

func (x *IntResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apps_git_pb_git_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntResponse.ProtoReflect.Descriptor instead.
func (*IntResponse) Descriptor() ([]byte, []int) {
	return file_apps_git_pb_git_proto_rawDescGZIP(), []int{3}
}

func (x *IntResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

// 返回string array的响应消息
type StringListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []string `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *StringListResponse) Reset() {
	*x = StringListResponse{}
	mi := &file_apps_git_pb_git_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringListResponse) ProtoMessage() {}

func (x *StringListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apps_git_pb_git_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringListResponse.ProtoReflect.Descriptor instead.
func (*StringListResponse) Descriptor() ([]byte, []int) {
	return file_apps_git_pb_git_proto_rawDescGZIP(), []int{4}
}

func (x *StringListResponse) GetResult() []string {
	if x != nil {
		return x.Result
	}
	return nil
}

// Readme请求消息
type GetReadmeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	CharLimit int32  `protobuf:"varint,2,opt,name=char_limit,json=charLimit,proto3" json:"char_limit,omitempty"`
	RepoLimit int32  `protobuf:"varint,3,opt,name=repo_limit,json=repoLimit,proto3" json:"repo_limit,omitempty"`
}

func (x *GetReadmeRequest) Reset() {
	*x = GetReadmeRequest{}
	mi := &file_apps_git_pb_git_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReadmeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadmeRequest) ProtoMessage() {}

func (x *GetReadmeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_git_pb_git_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadmeRequest.ProtoReflect.Descriptor instead.
func (*GetReadmeRequest) Descriptor() ([]byte, []int) {
	return file_apps_git_pb_git_proto_rawDescGZIP(), []int{5}
}

func (x *GetReadmeRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetReadmeRequest) GetCharLimit() int32 {
	if x != nil {
		return x.CharLimit
	}
	return 0
}

func (x *GetReadmeRequest) GetRepoLimit() int32 {
	if x != nil {
		return x.RepoLimit
	}
	return 0
}

// Commits请求消息
type GetCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	CharLimit int32  `protobuf:"varint,2,opt,name=char_limit,json=charLimit,proto3" json:"char_limit,omitempty"`
	RepoLimit int32  `protobuf:"varint,3,opt,name=repo_limit,json=repoLimit,proto3" json:"repo_limit,omitempty"`
}

func (x *GetCommitsRequest) Reset() {
	*x = GetCommitsRequest{}
	mi := &file_apps_git_pb_git_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitsRequest) ProtoMessage() {}

func (x *GetCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_git_pb_git_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitsRequest.ProtoReflect.Descriptor instead.
func (*GetCommitsRequest) Descriptor() ([]byte, []int) {
	return file_apps_git_pb_git_proto_rawDescGZIP(), []int{6}
}

func (x *GetCommitsRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetCommitsRequest) GetCharLimit() int32 {
	if x != nil {
		return x.CharLimit
	}
	return 0
}

func (x *GetCommitsRequest) GetRepoLimit() int32 {
	if x != nil {
		return x.RepoLimit
	}
	return 0
}

// UserResponse 消息，用于返回完整的用户信息
type UserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Company   string `protobuf:"bytes,2,opt,name=company,proto3" json:"company,omitempty"`
	Location  string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Email     string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Bio       string `protobuf:"bytes,5,opt,name=bio,proto3" json:"bio,omitempty"`
	Followers int32  `protobuf:"varint,6,opt,name=followers,proto3" json:"followers,omitempty"`
}

func (x *UserResponse) Reset() {
	*x = UserResponse{}
	mi := &file_apps_git_pb_git_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResponse) ProtoMessage() {}

func (x *UserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apps_git_pb_git_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResponse.ProtoReflect.Descriptor instead.
func (*UserResponse) Descriptor() ([]byte, []int) {
	return file_apps_git_pb_git_proto_rawDescGZIP(), []int{7}
}

func (x *UserResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserResponse) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *UserResponse) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UserResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserResponse) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *UserResponse) GetFollowers() int32 {
	if x != nil {
		return x.Followers
	}
	return 0
}

// 请求单个仓库信息的消息
type RepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner    string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`                       // 仓库拥有者的用户名
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"` // 仓库名称
}

func (x *RepoRequest) Reset() {
	*x = RepoRequest{}
	mi := &file_apps_git_pb_git_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoRequest) ProtoMessage() {}

func (x *RepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_git_pb_git_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoRequest.ProtoReflect.Descriptor instead.
func (*RepoRequest) Descriptor() ([]byte, []int) {
	return file_apps_git_pb_git_proto_rawDescGZIP(), []int{8}
}

func (x *RepoRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *RepoRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

var File_apps_git_pb_git_proto protoreflect.FileDescriptor

var file_apps_git_pb_git_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x62, 0x2f, 0x67, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x67, 0x69, 0x74, 0x22, 0x30, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb0,
	0x01, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x22, 0x28, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x25, 0x0a, 0x0b, 0x49,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x6c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6d,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9e, 0x01,
	0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x22, 0x40,
	0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0xf9, 0x09, 0x0a, 0x0a, 0x47, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x43, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x69,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x2e, 0x67,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x67, 0x69, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x42, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x10,
	0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x12,
	0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x12, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x67, 0x69, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x67, 0x69,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x67, 0x69,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x2e, 0x67,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x2e, 0x67, 0x69, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x17, 0x2e, 0x67, 0x69, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x69, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6f, 0x12, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x2e, 0x67, 0x69,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x17, 0x2e,
	0x67, 0x69, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x6d, 0x65, 0x12, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67,
	0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x63, 0x64, 0x31, 0x39,
	0x6d, 0x6c, 0x2f, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x2f, 0x67, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apps_git_pb_git_proto_rawDescOnce sync.Once
	file_apps_git_pb_git_proto_rawDescData = file_apps_git_pb_git_proto_rawDesc
)

func file_apps_git_pb_git_proto_rawDescGZIP() []byte {
	file_apps_git_pb_git_proto_rawDescOnce.Do(func() {
		file_apps_git_pb_git_proto_rawDescData = protoimpl.X.CompressGZIP(file_apps_git_pb_git_proto_rawDescData)
	})
	return file_apps_git_pb_git_proto_rawDescData
}

var file_apps_git_pb_git_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_apps_git_pb_git_proto_goTypes = []any{
	(*GetUsernameRequest)(nil),             // 0: git.GetUsernameRequest
	(*RepoLineChangesCommitsResponse)(nil), // 1: git.RepoLineChangesCommitsResponse
	(*StringResponse)(nil),                 // 2: git.StringResponse
	(*IntResponse)(nil),                    // 3: git.IntResponse
	(*StringListResponse)(nil),             // 4: git.StringListResponse
	(*GetReadmeRequest)(nil),               // 5: git.GetReadmeRequest
	(*GetCommitsRequest)(nil),              // 6: git.GetCommitsRequest
	(*UserResponse)(nil),                   // 7: git.UserResponse
	(*RepoRequest)(nil),                    // 8: git.RepoRequest
}
var file_apps_git_pb_git_proto_depIdxs = []int32{
	0,  // 0: git.GitService.GetRepositories:input_type -> git.GetUsernameRequest
	8,  // 1: git.GitService.GetDependentRepositoriesByRepo:input_type -> git.RepoRequest
	8,  // 2: git.GitService.GetStarsByRepo:input_type -> git.RepoRequest
	8,  // 3: git.GitService.GetForksByRepo:input_type -> git.RepoRequest
	8,  // 4: git.GitService.GetTotalIssuesByRepo:input_type -> git.RepoRequest
	8,  // 5: git.GitService.GetUserSolvedIssuesByRepo:input_type -> git.RepoRequest
	8,  // 6: git.GitService.GetTotalPullRequestsByRepo:input_type -> git.RepoRequest
	8,  // 7: git.GitService.GetUserMergedPullRequestsByRepo:input_type -> git.RepoRequest
	8,  // 8: git.GitService.GetTotalCodeReviewsByRepo:input_type -> git.RepoRequest
	8,  // 9: git.GitService.GetUserCodeReviewsByRepo:input_type -> git.RepoRequest
	8,  // 10: git.GitService.GetLineChangesCommitsByRepo:input_type -> git.RepoRequest
	0,  // 11: git.GitService.GetName:input_type -> git.GetUsernameRequest
	0,  // 12: git.GitService.GetCompany:input_type -> git.GetUsernameRequest
	0,  // 13: git.GitService.GetLocation:input_type -> git.GetUsernameRequest
	0,  // 14: git.GitService.GetEmail:input_type -> git.GetUsernameRequest
	0,  // 15: git.GitService.GetBio:input_type -> git.GetUsernameRequest
	0,  // 16: git.GitService.GetOrganizations:input_type -> git.GetUsernameRequest
	0,  // 17: git.GitService.GetFollowers:input_type -> git.GetUsernameRequest
	5,  // 18: git.GitService.GetReadme:input_type -> git.GetReadmeRequest
	6,  // 19: git.GitService.GetCommits:input_type -> git.GetCommitsRequest
	4,  // 20: git.GitService.GetRepositories:output_type -> git.StringListResponse
	3,  // 21: git.GitService.GetDependentRepositoriesByRepo:output_type -> git.IntResponse
	3,  // 22: git.GitService.GetStarsByRepo:output_type -> git.IntResponse
	3,  // 23: git.GitService.GetForksByRepo:output_type -> git.IntResponse
	3,  // 24: git.GitService.GetTotalIssuesByRepo:output_type -> git.IntResponse
	3,  // 25: git.GitService.GetUserSolvedIssuesByRepo:output_type -> git.IntResponse
	3,  // 26: git.GitService.GetTotalPullRequestsByRepo:output_type -> git.IntResponse
	3,  // 27: git.GitService.GetUserMergedPullRequestsByRepo:output_type -> git.IntResponse
	3,  // 28: git.GitService.GetTotalCodeReviewsByRepo:output_type -> git.IntResponse
	3,  // 29: git.GitService.GetUserCodeReviewsByRepo:output_type -> git.IntResponse
	1,  // 30: git.GitService.GetLineChangesCommitsByRepo:output_type -> git.RepoLineChangesCommitsResponse
	2,  // 31: git.GitService.GetName:output_type -> git.StringResponse
	2,  // 32: git.GitService.GetCompany:output_type -> git.StringResponse
	2,  // 33: git.GitService.GetLocation:output_type -> git.StringResponse
	2,  // 34: git.GitService.GetEmail:output_type -> git.StringResponse
	2,  // 35: git.GitService.GetBio:output_type -> git.StringResponse
	4,  // 36: git.GitService.GetOrganizations:output_type -> git.StringListResponse
	3,  // 37: git.GitService.GetFollowers:output_type -> git.IntResponse
	2,  // 38: git.GitService.GetReadme:output_type -> git.StringResponse
	2,  // 39: git.GitService.GetCommits:output_type -> git.StringResponse
	20, // [20:40] is the sub-list for method output_type
	0,  // [0:20] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_apps_git_pb_git_proto_init() }
func file_apps_git_pb_git_proto_init() {
	if File_apps_git_pb_git_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apps_git_pb_git_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apps_git_pb_git_proto_goTypes,
		DependencyIndexes: file_apps_git_pb_git_proto_depIdxs,
		MessageInfos:      file_apps_git_pb_git_proto_msgTypes,
	}.Build()
	File_apps_git_pb_git_proto = out.File
	file_apps_git_pb_git_proto_rawDesc = nil
	file_apps_git_pb_git_proto_goTypes = nil
	file_apps_git_pb_git_proto_depIdxs = nil
}
